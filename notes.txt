Section2 - natours project 

lesson 2 project intro - 
{skewed background shape, animation hover effects, menu nack bar}

lesson 3 Building header part1

main points in the lesson: 

A: Best way to perform a basic reset is using the * universal selector
B: Setting project-wide definitions
C: new css feature, how to clip parts of elements using clip-path

* {margin:0; paddingn:0; box-sizing: border-box;} 
A= the starnoight * is a universal selector
by defualt browsers apply some margin and padding to some elements

B: properties placed in body element are inhertated to all the childs 
of the body , except the padding and marging. because that applies to body
* body{font-family:sans-serif, font-weight:400; font-size:16px;line-height:1.7; color:#777}
* 1.7 of line-height  means, mulitply by the oringal line-heihgt by 1.7 times

* vh = view port height, so 95vh means fit the element to 95% of the view heigt port
* background-position: top; menas the top of the image stays the same
*background-image: linear-gradient(to right, #color1, #color2), url(); 
that makes the image stay at the top and gradient bottom, 
the order has to be liner first and image second
* the firs pramter of the liner gradient is used to determine where 
the gradient goes .  
for example: to righ bottom; the gradient would start from
letf top to right bottom

* The Clip path new css feature
    ==========================
Tool: https://bennettfeely.com/clippy/
we used polygon property to make skew on right bottom
* The polygon takes 4 cordinates/pramters of x and y axis, which stands  for
the 4 couners of the element where we want to be visible.
* It starts from the left-top corner and goes clockwise like below:-
  top-left -> top-right -> right-bottom -> left-bottom.

    Examples of Polygon
    ==================

 -create traiangle : clip-path: polygon(50% 0, 100% 100%, 0 100%);
 -create skewed botom right: clip-path: polygon(0 0, 100% 0, 100% 50%, 0 100%);
 -create skewd like the monal restaurent: clip-path: polygon(0 50%, 100% 0, 100% 50%, 0 100%);

 Explanation of the triangel polygon: 
 
 the triangel takes three prameter, beacause it's tree side
 -first pramter moves/pushes 50% from x-axis and 0 from y-axis
 so it will start from top-center. if we make 50% both, it will start from midl-center
 -the second parmter tells the co-ordinate to move 100% to x-axis from where
 it was standing which is the top-left center and 100% to y-axis which goes
 all the way to right-bottom.
 -the third pramter of the co-ordinate moves 0 from  x-axis 
 and 100% to y-axis, so it will meet the first co-ordinate at top-center


 Lesson 4: Header part2 -logo, h1, text

:: Main points

{Easiest way to Center anything with the transform, top, left properties}

-img is inline element,so is good practice to put inside div/block element
- to use top and left propeties on element we need to set it's position: absolute
and the parent element to position relative. because that left or top 
is refrencing to the parent element. meaning move 40px from top  parent element

position : is The box's position (and possibly size) is specified with the 
'top', 'right', 'bottom', and 'left' properties. 
These properties specify offsets with respect to 
the box's 'containing block' aka parent element.

top:50%
left:50%
transform: translate(-50%, 50%); 

the transform is what makes the element  center exactly


Lesson 5: cool css animations using @keyframes


main points: @keyframes and animation property

the browser is optimized for opacity and transform when animating 

backface-visibility: hidden; is used to fix the shaking element when we animate with transform


Lesson 6: complex css animations - animate botton

main points: 

1- what pseduo elements and pseudo classes are
2- How adn why to use ::after, pseudo element
3. using transtion property to create hover over animation


.btn:link = pseudo classe is special state of selector an anchor 
:visted = when the user visted
we use transform: translateY(-3px); in order to move the buttom to top when we hover
a tag is inline element so display inline-block
a tag or any inline element is treated like text

box-shadow: x y blur = 0 10px 20px

Lesson 7: complex css animations - animate button part 2

pseudo:: after
creates a virtua element
* we have to set display: inline-bloc; because the btn is inline-block
- the pseudo is treated as child to it's parent element
.btn::after{width:100%} = that width 100% is the width of the btn
animation-fill-mode:backwards; this prevents the button to be visible 
before the animaton  start. 



============================================================

Chapter 3 - How CSS works behind the scenes

Lesson 2. Three Pillars of Writing Good HTML/CSS (Never Forget Them!)

- Responsivnes , Maintainable and scalable, Web perfomance

*Responsivnes: Fluid layouts, units, images, media queries, mobile first
*Maintainable: clean code, Easy-to-understand, supports Growth, Re-usable, 
Css architucture is the way weorginize files, name class, how we structure html markup

* Perfomance: less http request, less files in our html code, compress, use pre-processors, reduce images.

Lesson 3. How CSS Works Behind the Scenes An Overview

. what happens to css code when we load the website
. backend: figure out domain name server, http requests etc.
* N.B: Front-end: Browser Loads HTML -> Parse's  Html (meaning de-code line-by-line)
-> and stores that decoded html into DOM (Dom describes the entire web it's like family tree, parents, children, sibling elements)
-> loading CSS styles in the head when parsing the HTML 
-> Parse Css -> There is two phase of parsing CSS,
 A: Resolve Css Declaration conflicts through preocess called cascade
 B: Process final CSS values(i.e: convering margin from 50% into pixels)
 The finall parsed css code is stored in Tree-like structure called CSSOM(css object model)
 * CSSOM + DOM = Render Tree -> browsers renders that render tree using 
 algorithm called visual formatting modal, this algorithm has a lot
to do how we write our code . -> Final website

    Lesson 4. How CSS is Parsed, Part 1 The Cascade and Specificity
    ============================================================

Quick overview: CSS Terminalogy

.my-class{font-size:20px; color:blue;} 

.my-clsas -> selector, {} -> Declaration block, fond-size -> property, 20px -> value

The parsing process part 1

Cascade: combining different stylesheets and Resolving conflicts b/w different css rules and declration,
when more than one rule applies to certain element.

i.e: a tag is applied to blue color and underline by the browser(user agent) default 
then that a tag is formated with black color and no underline by the devloper(Author)
then the visiter user eidts temporarly on the browser.
so it's cascade's job to resolve all those desclaertin conflict which one is temporary or permanant

-Cacade Proce: Importance | Specificity |   Source order

Importance::

1.User !important declration 2.Author !important declration
3. Author declration 4.User declration 5.Deafult browser Declaration

- sometimes we will have conflicts in author stylesheets without !important keyword
in this case all the declration has the same Importance, so that's when
cascade starts calculate and compare the  Specificity of declration selectors

Specificity :: the order define's the most powerfull

1.Inline Styles   2. IDS  3.classes, pseudo-classes, attribute 
4. elements and pseudo elements

8min. i'm   confused with the calculation

count the above selector number of occurances in  each Declaration
- if there is declartion with inline style then thats is the winner
- if there is no inline style the declration with the most ID wins
- if there is no ID the declration with the most classes wins
- if there is no classes the declration with the most elements wins

Source Order::

if they still have the same specifity the last Declaration 
will be applied

 ::>> Main importants to remember about cascade and specificity

 *CSS Declaration marked with !important has the highest priority
 but only use as the last solution or otherwise your code will be messy
*inline styles will always have priority over the external stylesheets
* a selector containing 1 ID is more specific than one with 1000 classes
* a selector containing 1 class is more specific than one with 1000 elements
* the universal selector has no specifity power (0,0,0,0)
* rely more on specifity than on the order: but only rely on order when
using third part stylesheets

        Lesson 6. How CSS is Parsed, Part 2 Value Processing
        =====================================================

->author declared value -> cascade value -> specified value
 ->computed values (convert realtive units  to pixels.
and others like, font-size:bold; color:white; are converted to #ffffff and 700)
->used values: remaining values depending on the layout when using %
-> actual value : browsers dont use . value , so they round up or down

-bowsers has default/ intial value : font-size:16px; padding:0px;

* How units are converted from relative to absolute 

- when calculaing length(margin, padding) as percent based, it refrencs the width of it's parent
i.e: body{width:1000px} h1{padding:10%} = this padding is 100px
- rem always uses root font-size as refrencs no matter if it's used in length or typography
- if ems applied to typography it use it's parent computed value as refrencs
- if ems applied to length(padding, margin), it uses the current computed element value as refrence
- 90vh = 90%  of the viewheight browsers, 90vw = 90%  of the viewwidth of the browsers


        Lesson 7. How CSS is Parsed, Part 3 inhertance
        =====================================================

* iheritance is passing values to child elements
* properties related to text are inhertated and properties related
to length (margin, padding) are not . the value inhertated is computed value
* inhertance only works if no one is declared value that property


        Lesson 8. PX to rem
        =====================================================
main points: 
1: easy workfolow to convert px to rem
2: how and why to convert px to rem

Why:- it's helpfull for Responsivnes, so when we have breakpoints on device
all the measurements are reduced by one global Setting which is font-size in the html tag
-set html{font-size: 10px;}

using ems instead of rem it's difficult because it depeneds on both
 parent and root while rems only depend on root html

- so now when setting media queries you just have to change the font-size
in root


How::

- Setting the fon-size to px is bad practice, beacause it removes the 
controll from the users prefrence, there are some users that have browsers font default to 18 or 20px
.but by seeting font-size to percent, it grows as the user increase
so use % over px in the html root font-size 
if we want 10 pixels in % = 10/16 = 0.625 = 62.5%

        Lesson 9: The Visual Formatting Model
- it's Algorithm that calculates box modal , float, position, and determines 
the layout of the page. The algorithm takes consideration to thing like:

A: dimension of the box: aka The Box Model
B: Box type: inline, block and inline-block
C: Position schema: floats and positioning
D: stacking elements, viewports, dimension of images


A:: The Box Model

-every element on the page is seen as box which have margin, padding, border, fill area
images, videos and texts go to the content are, while colors and background colors
take the whole fil area. meaning colors and background-colors dont appl;y to padding

* if u dont use box-sizing:border-box; then the VFM calculates 
the marging and padding as part of the box, and that's bad

B::Box types - block elements - inline elements, -inline-block

- block elements are display:block or list-item, table; they take
 100% width of parent , vertically one and another
- inline elements can't use width and heights, only padding/margin left and right
- inline-block : mix of bot, they display as specified, only content space

C::Posiotions - noraml flow, floats, absolute positions

-normal flow: takes position: relateive; as default
- floats: float:left/right; sometimes container dont adjust it's height
to the element. and the solution is to use clear-fix. text and inline elements
will wrap around the floated element
- absolute: takes position:absoult;  has no impact to it's sarounding elements or content
* we use top, left, right and bottom, to offset the element from it's relatively positioned container
* absoult elements can overlap elements that occupying the same space.

C::Stacking context is what determines which order elements are displayed
stacking from context properties are like z-index, transform, filter, opacity 
- the element with higher z-index appears on top and the lowset on bottom


        Lesson 10. CSS Architecture, Components and BEM
        ===============================================
- Architecture, layouts, markup our code in professional / clean way
- Recomended Process = Think, Build(code),  Architect(Folder, files structure)

::Think
Component-Driven Design architucture

.uses seprate files that  are re-usable by their own, without depending
 on parents, it's similiar to Atomic Design by brad frost

Atomic design = smallest units are atoms -> molecules -> organisms -> template/Components -> pages

:: Build/coding

-having consistent strategy to name clases.
- Different approaches such as: S max , OOCSS, BEM(block Element Modifier). 

**BEM methadologies

- block{}  is standalone component that  is meaningfull it's own
- block__element{} is part of the block and it's meaningless by alone
- block__element--modifier{} is used to extend/create different version of the block/ elemenet

::Architect (folder and files structure)

- Different approaches such as: ITCSS, S MAX, THE 7-1 Pattern

** The  7-1 Pattern(mostly used)

- 7 different folders for partial SASS files  and 1 main.scss filer where
we import all other files into a compiled CSS stylesheets

The seven folders name are as below mentioned:

 Base folder: basic product definitation, resets, styles for html,and body
 Components: one file for each Component, independent, re-usable code
 Layout : define overall layout of the page, such as header, footer, or what holds the components together
 Pages: styles for specific pages of the project
 Themes: if you want to implement different visual theme.
 abstract: code that doesn't output any css(i.e: variables and mixins)
 vendors: where all third paries of css, icons, bootstrap, animation libararys

Lesson 11: Implemetn the BEM into HTML


        Chapter 4 : Intro to SASS and NPM
        =================================
Sass = css with elegence and super powers
browser dont know sass code, so we have to process to convert into css

Mian SASS features:
* variables= re-usable values such as colors, fonts
* Nesting= nest selectors inside one another. Less code
* mixins = Re-usable code
* Partials and imports = seprate and component based css files
* Operators= mathematical operators inside css
* Functions= similar to mixins, but produce valus that can be used. 
* Extends = to make different selectors inherit Declaration that are common
* Controll Directives = for writing  complex code  using conditionals and loops(not covered in this corse)

Sass syntax = indantation sensttive. no brackets, n columns.
SCSS syntax = indantation, brackets, columns. just like css syntax

variables, nesting, mixins, etends, functions
-how our background color disappeared and fixed by clear fix
-built in functions lighten and darken
- functions in sass

@function divide($a, $b){ @return $a / $b};
border-radius: divide(100, 2) * 1px; the * 1px is giving unit 

@extend use  %placeholder where you store data and then @extedn that placeholder
Diff b/w extends and mixins: @extends copy the code you extending to the place holder
while mixins are the opposite
-only use extends when the rules we are extending are inherently and thematically related
in our case the buttons are related
-

* mixins are like function in javascript. they take prameters
you can call them at some point with or without the prameters

--- Lesson 5 Intro to command line
mv = move
rm or del = remove forver
rm -r = delete recursively files and folder
cp = copy
Motivation
open image.png = opens the file

--- Lesson 6 Install sass and intro to npm

--save = save to the package.js or it' will not be shown on package.json
--save-dev = save as dev-dependenies

--lesson 7. NPM Scripts Let's Write and Compile Sass Locally

write this script in your package.json

"compile": "node-sass sass/main.scss css/style.css -w

* the sass/main.scss is the entry point
* the css/style.css is the out point
-w stands: for watch changes automatically, so we dont have to run the script

                Lesson 8. Reloading a Page on File Changes
- npm install live-server -g
- Call from everywhere "live-server" command
- or install the vs-code extension live-server 

                Chapter 5 Advanced sass Part 2
                ==============================
::lesson 2 = convert our css to sass by nesting and variables

The embarsan '&' sign copies/refrence to the parent selectors  thats is beign used at.

example: .header{
        &logo-box:;
}
the __logo-box is transpiled as .header__logo-box{}

::lesson 3 = Implemenet the 7-1 Architecture

* P.s: This architecture is good for Big projects, and it's overkill to the small ones

abstract: codes that not output any css (variables, mixins, etc..)