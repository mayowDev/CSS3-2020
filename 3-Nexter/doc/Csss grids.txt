* every 2 hour content i can finish in 10hrs with taking  notes and practicing/coding along

##Topic 2 - why Css is whole new mindset

css Grid layout = Two dimensional grid system 
Css Grid replaces float layouts

- we must have grid container set to display: grid; or grid-inline
- inside container we have grid items which have row(x) axis, column(y) axis
- the line that divides the vertical and horizantal grid is called grid line
 and they automatically numbered for the columns and rows starting from 1 to number
of columns or rows +1

- space b/w two grid lines called grid track
- the area b/w two horizantal and two vertiacal grid lines is called  grid area
- the area b/w two horizantal and two vertiacal adjecent grid lines is 
called  grid cell

## Topic 4 - we want 2rows and 3 columns grid

we deifned the rows or column by px which stands for the height

grid-template-rows =  150px 150px;  //2rows with 150px height eeach
grid-template-columns =  150px 150px 150px; //2columns  with 150px height eeach

grid-row-gap: 30px; // space b/w the 2 rows / horizantal 
grid-column-gap: 30px; // space b/w the 2 columns / vertically
grid-gap:30px; set both vertical and hirzantal with same space amount 

## Topic 5- using repeat wit fr units instead of 150px for each row

- grid-template-rows =  repeat(2, 150px); instead of 150px 150px;  
- grid-column-rows =  repeat(2, 150px) 300px; instead of 150px 150px 300px;  
- grid-column-rows =  repeat(2, 150px) 1fr; instead of 150px 150px ramining-space;  


##Topic 6 - postion Css grid using grid-row and grid-column

grid-row-start: 2; = start from second row
grid-row-end: 3; = end at third row
grid-column-start: 3; = start from second column
grid-column-end: 4; = end at third column

- the numbers indicate the line-numbers b/w rows and columns, you can see at firefox terminal

- grid position shothand  for above code

grid-row: start / end; 
grid-column: start / end; 

shorthand for above two lines as weel

* grid-area: start-row / start-column / end-row / end-column ; 

## Topic 7 - span/stretch the grid item to occupy two column

- we can have multiple  grid items in one cell one top of another, and then use z-index to prioritize which one to become above
 plus you can set position absoulte to move on item into different area inside that cell, to make like collapsing or broken layout.

- grid-colum: 2 / span 2; start from column two and stretch width of 2 columns. in this case untill column 4
- grid-colum: 2 / -1; start from column two and stretch untill the end. incase you dont know how many columns is there. -1 = stands for last column


## Topic - 9 challnge

row: y-axis : start from left to right  (length / height)
column: x-axis: start from left to right (wide / width)

- css grid applies the code to the order of the element of our layout

example:
  <div class="header">header</div>
  <div class="small-box-1">box1</div>
  <div class="small-box-2">box2</div>
  <div class="small-box-3">box3</div>
  <div class="sidebar">sidebar</div>
  <div class="footer">footer</div>

  grid-template-rows:100px 200px 400px 100px

* first code for first element, last code for las element, etc..
- header = 100px , small-box(1,2,3) = 100px, main content = 400px, footer=100px


## Topic 10 - naming Grid lines

in professional project we name where the grid-lines are start and end etc

method 1 : grid-liens are named automatically by browsers with numbers
method 2 : we can name our own grid lines inside the grid-template-rows with unique names

example: 

grid-template-rows: [header-start] 100px [header-end box-start] 200px [box-end main-start]
400[main-end foooter-start] 100px [footer-end];

- so to use those names  replace it with the numbers of grid-row so instead of grid-row: 1 / -1;  use grid:= box-start / footer-start or main-end


- naming if there is repeat() function used we will create with named set grid lines

example: 

reapeat(3, [col-start] 1fr [col-end]) 200px [grid-end];

so the above line will create what's called set named line, because the name is conflicted
when every friction uses col-start and col-end, so css grid system give set-names
* grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 200px [grid-end];

usage: 

.main{ grid-column: col-start 1 / col-end 3;}
.footer{ grid-column: col-start 1 / grid-end;}

## Topic 11 - naming Grid-areas

- for smaller layout you can use this, but it will be redundent if we use for big projects

grid-template-areas: "head head head head" 
                       "box- box-2 box-3 side"
                       "main main main side"
                       "foot foot foot foot";

usage:- 

.header {grid-area:head;}
.sidebar {grid-area:side;}
.main {grid-area:main;}
.footer {grid-area:foot;}

- so now the grid-layout will be how we specified in our grid-template-areas, those 4 points line. you can name whatever you want

* be carefull when creating template-area definiation. it must match and fill  the columns and the rows specified in grid-template-columns/rows

* so if we have 4x4 thats 16 cells, so each cell must have name or it can be empty by using dot "."


## Topic 12 - explicit Grid vs  implicit Grid

- grid-template-rows:  repeat(2, 150px); grid-template-column:  repeat(2, 1fr)

explicit = we explicitly sepcified the  first two column and row, if we have more then for elements in our html. 
the ramining will just be added as row to fill the remaining parts of the grid/content

- we can style implicit/remaining part by using grid-auto-rows: 80px; or grid-auto-column: .5fr;
- grid-auto-columns only works when we set the grid-auto-flow to column
- the reason css grid autocompletes the implicity as rows is because of grid-auto-flow property that is by default set to row, but you can change  to column

- To style unkown data coming from databse to be exact rows and columns, set the grid-auto-rows to what we set to the explicit grid-templates-row

* implicit has dote lines as grid-lines while explicit has dashed lines as grid-lines

## Topic 13 - aligining Grids (grid items to grid areas)

aligning for container:

y-axis colum /verticaly = align-items: stretched/start/center/end/;
x-axis rows / horizantally= justify-items

aligning for items: over write overall  alignments setting 

y-axis columns align-self
x-axis rows    justify-self



## Topic 14 - align entire content/grid-tracks inside grid-container/parent


horizantal(x-axis): justify-content:center/end/start/space-between/space-around/space-evenly
vertically(y-axis): align-content: center/end/start/space-between/space-around/space-evenly

align/content/items = column/vertical
justify/content/items = row/horizantal

* adding 'dense' to grid-auto-flow: row dense;
it will shuffle to fill the wholes/empty spaces of the grid with the remaining content



## Topic 15 - using min-content, max-content and the minmax()

max-content = maximum space to fit the content. exapand as the content increase
min-content = minum space to fit the content. shrink as the content increase
minmax() = takes two values and makes sure the content stays b/w this two values

grid-template-rows: reapeat(2, minmax(150px, min-content));
grid-template-columns:  minmax(200px, 300px); = no matter what, content  will be b/w 200px and 300px


##Topic - 16 Auto fill and Auto-fitt
codepen.io/jonasschemedtmann/cssgrid intro - part 4

-container{width:1000px}
-grid-tempalate-columns:repeat(auto-fill, 100px);
- auto-fill = creates as many tracks as posible by dividing the width of the container
to the width we specify. so if container is 1000px, then 1000/100 = 10 tracks

- auto-fit = creates as many tracks as posible but it collapses the empty ones
 while auto-fill dont  collpase

- auto-fit and minmax() together is helpfull for responsive layout for columns